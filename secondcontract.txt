pragma solidity ^0.4.5;

interface Regulator{
    function checkValue(uint amount) public returns(bool);
    function loan() public returns(bool);
}

contract Bank is Regulator{
    uint private value;
    
    function Bank(uint amount) public       {value=amount;}
    
    function deposit(uint amount) public    {value+=amount;}
    
    function withdraw(uint amount) public   {if(checkValue(amount))        value-=amount;}
    
    function balance() public returns(uint)                            {return value;}
    
    function checkValue(uint amount) public returns (bool)              {return (amount>=value);}
    
    function loan() public returns (bool)                               {return value>0;}
}

contract MyFirstContract is Bank(10)
{
uint private age;
string private name;

    function setName(string newName)
    public {name=newName;}

    function getName() returns (string)
    {return name;}

    function setAge(uint newAge) public
    {age=newAge;}

    function getAge() returns (uint)
    {return age;}

}